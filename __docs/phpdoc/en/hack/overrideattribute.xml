<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="hack.overrideattribute">
  <title>Override Attribute</title>
  <para>
    The <literal>Override</literal> attribute is the child class'counterpart to the parent class' <literal>abstract</literal> declaration. It is an optional annotation on a method, implemented with the <literal>&lt;&lt;Override&gt;&gt;</literal> user attribute. If the <literal>&lt;&lt;Override&gt;&gt;</literal> attribute is found on a method, and that method does not exist in the set of (non-abstract) methods inherited from parents, an error is thrown. In Hack partial mode, this has the effect of throwing when the parent is defined in PHP, since the typechecker cannot access the parent's method declarations. Consider the following:
    <informalexample>
      <programlisting role="php">
<![CDATA[
// file1.php
<?hh

class CParent {
  public function doStuff(): void {
    return $this->implementation();
  }
  protected function implementation(): void {
    echo 'parent implementation', "\n";
  }
}

// file2.php
<?hh
class Child extends CParent {
  <<Override>> protected function implementation(): void {
    echo 'child implementation', "\n";
  }
}
]]>
      </programlisting>
      <para>
        If the parent class is (inadvertently) refactored to the following...
      </para>
      <programlisting role="php">
<![CDATA[  // file1.php
<?hh
class CParent {
  public function doStuff(): void {
    echo 'parent implementation', "\n";
  }
}
]]>
      </programlisting>
      <para>
        ... the <literal>&lt;&lt;Override&gt;&gt;</literal> annotation will result in a typechecker error, alerting the refactorer of <literal>CParent</literal> of the existence of <literal>Child</literal>. 
      </para>
    </informalexample>
  </para>

  <sect1 xml:id="hack.overrideattribute.traits">
    <title>In Traits</title>
    <para>
      The <literal>&lt;&lt;Override&gt;&gt;</literal> annotation may also be added to trait methods, although with slightly different behavior than in standard classes. For trait methods annotated with <literal>&lt;&lt;Override&gt;&gt;</literal>, the check of whether the overridden method exists is deferred to the classes that <literal>use</literal> the trait. 
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
trait T1 {
  <<Override>> // checked on use classes
  function foo(): void {}
}
 
class C1 {
  use T1; // error! foo is not an override
}
 
class C2 {
  function foo(): void {}
}
 
class C3 extends C2 {
  use T1; // OK! C2's implementation is being overridden
}
]]>
        </programlisting>
      </informalexample>
    </para>
  </sect1>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
