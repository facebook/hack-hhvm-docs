<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="hack.arrays">
  <title>Arrays</title>
  <para>
    The Hack language guidance is to use <link linkend="hack.collections">collections</link> whenever and wherever possible. However, 100% usage of collections is obviously not realistic given how much arrays are used in various codebases (i.e., arrays were the &quot;collection&quot; type before collections). And there just may be legitimate use cases for an array. Here is how Hack handles arrays:
    <itemizedlist>
      <listitem>
        <para>Use arrays in the normal, PHP way. (e.g., <literal>array</literal>).</para>
      </listitem>
      <listitem>
        <para>
          Use an explicitly typed array, indexed by integers, where the value of the array has one and only one type. (e.g, <literal>array&lt;someType&gt;</literal>).
        </para>
      </listitem>
      <listitem>
        <para>
          Use an explicitly typed array, indexed by an <literal>int</literal> or <literal>string</literal> , where the value of the array has one and only one type. (e.g., <literal>array&lt;string, someType&gt;</literal>).
        </para>
      </listitem>
      <listitem>
        <para>
          Use a <link linkend="hack.generics">generic</link> array, indexed by integers, where the value of<literal>T</literal> can be of any type. (e.g., <literal>array&lt;T&gt;</literal>).
        </para>
      </listitem>
      <listitem>
        <para>
          Use a generic array, indexed by an <literal>int</literal> or <literal>string</literal>, where the value of <literal>T</literal> can be of any type upon instantiation. (e.g., <literal>array&lt;int, Tv&gt;</literal> or <literal>array&lt;string, Tv&gt;</literal>).
        </para>
      </listitem>
    </itemizedlist>
  </para>
  <note>
    <para>
      Actually, PHP allows array keys to be floats or objects. With floats, the key is truncated to an integer. Hack allows <literal>float</literal> keys; however, they are not *officially* supported.
    </para>
  </note>
  <para>
    Arrays are handled with a bit more restriction in <literal>// strict</literal> mode. Code that is written in strict mode can use arrays, but they must be typed (e.g., <literal>array&lt;string&gt;</literal>when used as class members, function/method parameters or return types.
  </para>
  <para>
    Here is a code example expressing some of the Hack array constructs:
    <informalexample>
      <programlisting role="php">
<![CDATA[
<?hh

class Foo {}
class HackArrays<T> {
  private array $arr = null;
  private array<T> $arr2 = null;
  private array<string, string> $arr3 = null;

  public function __construct(T $data) {
    $this->arr2[0] = $data;
  }

  public function bar(T $data): void {
    $this->arr = array();
    var_dump($this->arr);
    $this->arr2[] = $data;
    var_dump($this->arr2);
    $this->arr3["hi"] = new Foo();
    var_dump($this->arr3);
  }
}

function main_arr() {
  $ha = new HackArrays("Facebook");
  $ha->bar("Food");
}

main_arr();
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
array(0) {
}
array(2) {
  [0]=>
    string(8) "Facebook"
  [1]=>
    string(4) "Food"
}
array(1) {
  ["hi"]=>
    object(Foo)#2 (0) {
    }
}
]]>         
      </screen>
    </informalexample>
  </para>
  <para>
    A &quot;map&quot; is the most associative for an array. In other words, Hack disallows <literal>array&lt;int, int, int&gt;</literal>.
  </para>
</chapter>
  
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
