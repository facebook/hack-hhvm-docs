<?xml version="1.0" encoding="utf-8"?>
 <chapter xml:id="hack.intro" xmlns="http://docbook.org/ns/docbook">
<title>The Hack Language</title>
  <para>
    Hack is a language for HHVM that interopates seamlessly with PHP. HHVM supports both Hack and PHP; code can be run on HHVM in either language or even a mixture of both.
  </para>
  <para>
    To get started with Hack, it really is as simple as:
    <itemizedlist>
      <listitem><para>Use <literal>&lt;?hh</literal> at the top of your file; you can also change <literal>&lt;?php</literal> to <literal>&lt;?hh</literal> in existing PHP files, and your code will run just as before in HHVM.</para></listitem>
      <listitem><para>Optionally name your file with the <literal>.hh</literal> extension to distingusih your Hack files from your PHP files. Of course, you can keep the name of the file <literal>.php</literal> (or any other extension that you use)</para></listitem>
      <listitem><para>Optionally start using <link linkend="hacklangref">Hack features</link></para></listitem>
    </itemizedlist>
  </para>
  <sect1 xml:id="hack.intro.whatis">
   <title>What is Hack?</title>
    <para>
      Hack is a language for HHVM that interopates seamlessly with PHP. The barrier to entry for Hack is low. To get started, all that is needed is to generally understand the features that Hack provides and <link linkend="install.hack.bootstrapping">how to call the Hack type checker</link> (<literal>hh_client</literal> invokes the type checker at the command line)
    </para>
    <para>
      The goal of Hack to offer developers a way to write cleaner, safer and refactorable code while trying to maintain a level of compatibility with current PHP codebases. The primary way that this goal is achieved is to provide developers a way to annotate PHP functions and classes with type information, providing a type checking tool to validate those annotations. In addition, Hack also provides specific language feature additions such as:
      <itemizedlist>
        <listitem><para><link linkend="hack.generics">generics</link></para></listitem>
        <listitem><para><link linkend="hack.collections">collections</link></para></listitem>
        <listitem><para><link linkend="hack.nullable">nullable</link></para></listitem>
      </itemizedlist>
    </para>
    <para>
      Each of the Hack features, and more, is discussed in great detail in this documentation.
    </para>
    <para>
      Hack code is indicated through the <literal>&lt;?hh</literal> marker at the top of a file, as opposed to the canonical <literal>&lt;?php</literal> marker. 
    </para>
    <para>
      <emphasis role="strong">Very important note</emphasis>: The type checker is invoked before runtime to determine whether code is typesafe. While HHVM knows about and understands the Hack language, it does not necessarily strictly enforce them. This is different from a true statically-typed language like C# where code is type checked at compile time and enforced (usually via some sort of exception mechanism) at runtime.
    </para>
  </sect1>

  <sect1 xml:id="hack.intro.background">
  <title> Hack Background </title>
    <para>
      Facebook was initially built with PHP. Parameters and return types were specified
      in comments. Parsers could use this to create documentation. But type-checking was non existent.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
/**
 * Wraps a name in a box
 *
 * @param raw-str $name
 * @return html-str
 */
function say_hello($name) {
  return "<div class=\"box\">Hello ".htmlize($name)."</div>";
}
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>
      In 2009, a PHP compiler called HipHop was released. In 2010, minor changes to the PHP language were introduced by the HPHP team to improve development time and provide basic type safety. The changes were XHP and parameter type constraints.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
/**
 * Wraps a name in a box
 *
 * @return xhp
 */
function say_hello(string $name) {
  return <div class="box">Hello {$name}</div>;
}
]]>         
        </programlisting>
      </informalexample>
    </para>
    <para>
      In 2012, Facebook engineering teams started exploring the idea of annotating return types. And the Hack language was born...
    </para>
  </sect1>
  
  <sect1 xml:id="hack.intro.summary">
    <title>Summary</title>
    <para>
      Hack provides the following, non-exhaustive list of features:
      <itemizedlist>
        <listitem>
          <para>
            Ability to annotate function and method return types.
          </para>
        </listitem>
        <listitem>
          <para>
            Ability to annotate the type of member variables.
          </para>
        </listitem>
        <listitem>
          <para>
            Protection against common unsafe coding patterns (e.g. sketchy
            null checks).
          </para>
        </listitem>
        <listitem>
          <para>
            Type-safe collections (<literal>Vector</literal>, <literal>Map</literal>, <literal>Set</literal>).
          </para>
        </listitem>
        <listitem>
          <para>
            A tool to check the types (the Hack type checker).
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      Hack has been designed with PHP compatibility in mind. The type checker enforces checks on typed code and assumes calls to/from PHP and other untyped code are correct. This means the amount of type checking will gradually increase as more and more code is written in Hack.
    </para>
    <para>
      Hack is unlike many other statically typed languages:
      <itemizedlist>
        <listitem>
          <para>
            The type checking phase is instant.
          </para>
        </listitem>
        <listitem>
          <para>
            Local types are inferred.
          </para>
        </listitem>
        <listitem>
          <para>
            There is a minimal need for casting.
          </para>
        </listitem>
        <listitem>
          <para>
            The type related error messages are designed to make it easy to fix the core issue.
          </para>
        </listitem>
        <listitem>
          <para>
            The type checking model is a best effort model. Hack code can call PHP code and vice versa.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      Hack comes with the following benefits (and possible benefits):
      <itemizedlist>
        <listitem>
          <para>
            Return types makes the code more readable.
          </para>
        </listitem>
        <listitem>
          <para>
            Some typing mistakes will be caught by the type checker.
          </para>
        </listitem>
        <listitem>
          <para>
            Better emacs/vim/etc. integration.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>Future</emphasis>: Reliable refactoring tools.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>Future</emphasis>: Most typing mistakes will be caught statically.
          </para>
        </listitem>
      </itemizedlist>
    </para>
  </sect1>
</chapter>
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
