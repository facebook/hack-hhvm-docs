<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="hack.otherrulesandfeatures" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Other Hack Rules and Features</title>
  <para>
    There are some other Hack rules and features that are worth noting and knowing.
  </para>
  <sect1 xml:id="hack.otherrulesandfeatures.varargs">
    <title>Variable Number of Arguments</title>
    <para>
      Hack provides the capability to indicate that a function takes a variable number of arguments. This is done using <literal>...</literal> (three dots).
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

function var_foo(int $x, ...) : int {
  // use func_get_args() to get the actual arguments returned as an array
  // Remember, in this case, the $x will be counted as an argument too.
  $arg_arr = func_get_args();
  return $x + count($arg_arr);
}

function main_vna() {
  $y = var_foo(3, 2, 'hi', array(), 1.3); // $y = 8 (3+5)
  $z = var_foo(3); // $z = 4 (3+1)
  echo $y."\n";
  echo $z;
}

main_vna();
]]>
        </programlisting>
        <para> 
          The general gotcha here will be that any explicitly defined parameters are counted in the call to <literal>func_get_args()</literal>.
        </para>
      </informalexample>
    </para>
    <para>
      Here is another example:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

function sum(...): int {
  $s = 0;
  foreach (func_get_args() as $e) {
    $s += $e;
  }
  return $s;
}

function main_vna() {
  $x = sum(3, 2, 5, 3, 1.3);
  echo $x; //$x = 14.3
}

main_vna();
]]>
        </programlisting>
        <para>
          With the above example, HHVM will give an error (probably <literal>Invalid Operand Type</literal> if anything &quot;non-summable&quot; (e.g., <literal>array()</literal>) is passed to <literal>sum()</literal> as a variable argument.
        </para>
      </informalexample>
    </para>
    <para>
      <emphasis>Note</emphasis>: It is important to note that functions defined with a variable number of arguments are not able to be type checked statically. Hack does not currently allow variable number of arguments to be type annotated.
    </para>
    <note>
      <para>
        There is discussion around implementing a way to type annotate variable number of arguments. For example, <literal>function foo(int $x, string ...)</literal>. This would imply that all of the variable number of arguments would be of the <literal>string</literal> type. However, this could not cover the case where the variable number of arguments are different types or where they are based on some sort of format string (e.g. <literal>sprintf</literal>).
      </para>
    </note>
  </sect1>

  <sect1 xml:id="hack.otherrulesandfeatures.numberhandling">
    <title>Number Handling</title>
    <para>
      In PHP, <literal>float</literal> and <literal>int</literal> are incompatible at the type hint level:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
function f1(float $x) {
}
f1(10);
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
HipHop Fatal error: Argument 1 passed to f1() must be an instance of float, int given
]]>
        </screen>
      </informalexample>
    </para>
    <para>
      This incompatibility implies that the distinction between <literal>int</literal> and <literal>float</literal> must be tracked. However, some math operators have a return type which depends on their input:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
$x = 10;
echo gettype($x/2), "\n";
echo gettype($x/3), "\n";
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
integer
double
]]>
        </screen>
      </informalexample>
    </para>
    <para>
      Hack has an internal <literal>num</literal> type. For example, if Hack throws an errors saying something to the effect of &quot;It is incompatible with an <literal>int</literal>/<literal>float</literal> because it is the result of a division (/)&quot;, this means that the type represented in the error message is either an <literal>int</literal> or <literal>float</literal>, but cannot be determined statically.
    </para>
    <para>
      <emphasis role="strong">Note: At this point, <literal>num</literal> is not an annotatable type. For example, a function cannot return <literal>foo(): num{...}</literal>. This may be implemented in the future. This discussion is with respect to <literal>num</literal> as an internal type to Hack.</emphasis>
    </para>
    <para>
      In Hack, mathematical operations are handled in the following way:
      <orderedlist>
        <listitem>
          <para>
            <literal>int</literal> &amp; <literal>float</literal> are subtypes of <literal>num</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            Basic math operators (+, -, *, /) return a <literal> float</literal> if one of the inputs is a <literal>float</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            Basic math operators (+, -, *) return <literal>int</literal> if both the inputs are <literal>int</literal>s.
          </para>
        </listitem>
        <listitem>
          <para>
            In all other cases, basic math operators return a <literal>num</literal>, and may need to be explicitly cast to an appropriate type. See next bullet.
          </para>
        </listitem>
        <listitem>
          <para>
            When returning from or calling another function, <literal>num</literal> needs to be explicitly cast to the correct type (either <literal>int</literal> or <literal>float</literal>).
          </para>
        </listitem>
      </orderedlist>
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

function f1(float $x) {
}

function f2(int $x, float $y): int {
  $a = 2 * $x; // $a is an int
  $b = 2 * $y; // $b is a float
  $c = $x / $a; // $c is a num
  $d = $c * $y; // $d is a float
  f1($d);  // this is allowed
  return (int) $c;  // $c needs to be cast here
}
]]>
        </programlisting>
      </informalexample>
    </para>
    <sect2 xml:id="hack.otherrulesandfeatures.numberhandling.equivalenttypes">
      <title>Using Equivalent Types</title>
      <para>
        It is important to note that Hack does not support the use of certain types that are equivalent to other types:
        <itemizedlist>
          <listitem>
            <para>
              <literal>double</literal> (use
              <literal>float</literal>)
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>real</literal> (use
              <literal>float</literal>)
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>boolean</literal> (use
              <literal>bool</literal>)
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>integer</literal> (use
              <literal>int</literal>)
            </para>
          </listitem>
        </itemizedlist>
       </para>
      <para>
        Take <literal>double</literal> as an example. <literal>double</literal> is an alias for <literal>float</literal> . It is the exact same data type as <literal>float</literal>. Using <literal>double</literal> can lead to confusion (i.e., thinking that a <literal>double</literal> has more precision than a <literal>float</literal>) and make the readability of the codebase inconsistent, so <literal>double</literal> was removed from Hack.
      </para>
    </sect2>
  </sect1>

  <sect1 xml:id="hack.otherrulesandfeatures.typeinference">
    <title>Type Inference</title>
    <para>
      Most people are familiar with statically typed languages (like C or Java). Having a type inference system may, however, be a new concept. A type inference system brings many pros (e.g., write less and more readable code), but there are also a few gotchas.
    </para>
    <sect2 xml:id="hack.typeinference.blocklevel">
      <title>Block level inference</title>
      <para>
        Hack implements a unique block level inference system.
      </para>
      <para>
        Assume a nullable <literal>?int</literal> variable and a function which takes an <literal>int</literal>. There are two choices for calling this function with a nullable. <literal>?int</literal> can be cast to an <literal>int</literal>, in which case <literal>null</literal> will be converted to 0. Or code can be written like this:
        <informalexample>
          <programlisting role="php">
<![CDATA[
<?hh

function foo(int $y): void { }

function bar(?int Sx): void {
  if (is_int($x)) {
    foo($x);
  } else {
    ...
  }
}
]]>
          </programlisting>
        </informalexample>
      </para>
      <para>
        When <literal>is_int($x)</literal> is written inside a conditional statement, the Hack type checker will know that within
        the <literal>if</literal>/<literal>then</literal> branch, <literal>$x</literal> is an <literal>int</literal>. In the <literal>if</literal>/<literal>else</literal> branch, the type will be <literal>null</literal>. Here is another example:
        <informalexample>
          <programlisting role="php">
<![CDATA[
<?hh

class Foo {}
class Bar extends Foo { public function blah(): void {} }

function foo(Foo $x): void {
  if ($x instance of Bar) {
    // $x is now a Bar
    $x->blah();
    ...
  } else {
    // $x is still just a Foo
    ...
  }
}
]]>
          </programlisting>
        </informalexample>
      </para>
    </sect2>
    <sect2 xml:id="hack.otherrulesandfeatures.typeinference.localvsmembervars">
      <title> Local vs. member variables </title>
      <para>
        <literal>protected</literal>, <literal>private</literal> and <literal>public</literal> member variables are not typed in the same way as local variables. The reason is that <literal>protected</literal> and <literal>private</literal> variables might change when calling other functions.
      </para>
      <para>
        This code is fine:
        <informalexample>
          <programlisting role="php">
<![CDATA[
<<?hh

class Foo {
  public function f1(?int $x): void {
    if (is_int($x)) {
      $this->doSomething();
      $y = $x * 2;
    }
  }

  public function doSomething(): void {}
}
]]>
          </programlisting>
        </informalexample>
      </para>
      <para>
        This code however is incorrect:
        <informalexample>
          <programlisting role="php">
<![CDATA[
<?hh

class Foo {
  protected ?int $x;

  public function f1(): void {
    if (is_int($this->x)) {
      $this->doSomething();
      // can no longer assume $this->x is an int, doSomething might have changed it back to null.
      // note: can't analyze doSomething() because a child class of Foo might change its behavior.
      $y = $this->x * 2;
    }
  }

  public function doSomething(): void {}
}
]]>
          </programlisting>
        </informalexample>
      </para>
      <para>
        Here is a possible fix to the above problem:
        <informalexample>
          <programlisting role="php">
<![CDATA[
<?hh

class Foo {
  protected ?int $x;

  public function f1(): void {
    $x = $this->x;
    if (is_int($x)) {
      $this->doSomething();
      $y = $x * 2;
    }
  }

  public function doSomething(): void {}
  }
]]>
          </programlisting>
        </informalexample>
      </para>
    </sect2>
  </sect1>

  <sect1 xml:id="hack.otherrulesandfeatures.classinitialization">
    <title>Class Initialization</title>
    <para>
      Hack enforces strict rules regarding class initialization. The following piece of code is correct:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

abstract class A {
  protected int $x;
}

class B extends A {
  public function __construct() {
    $this->x = 10;
  }
}
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>
      For an abstract class, member variables need not be initialized. For concrete child classes, however, member variables must be
      initialized, including any abstract class parent variables. If <literal>B</literal> fails to initialize <literal>$x</literal>, the type checker will complain about the &quot;class member is not always properly initialized&quot;.
      <informalexample>
        <para>
          In the non-abstract case, the following piece of code is accepted:
        </para>
        <programlisting role="php">
<![CDATA[
<?hh
class Foo {
  protected int $x = 10;
}
]]>
        </programlisting>
        <para>
          However, this piece of code is not accepted:
        </para>
        <programlisting role="php">
<![CDATA[
<?hh
class Foo {
  protected int $x;
}
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>
      Again, the type checker will complain about the &quot;class member is not always properly initialized&quot;. The solution is to write the accepted case above or use <literal>__construct()</literal>:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
class Foo {
  protected int $x;

  public function __construct() {
    $this->x = 10;
  }
}
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>
      There is another implication here. A <literal>protected</literal> or a <literal>public</literal> instance method cannot be
      called before the constructor has finished initializing the member variables. The following piece of code is correct:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
class Foo {
  protected int $x;

  public function __construct() {
    $this->x = 10;
    $this->foo();
  }
  protected function foo() {
    ...
  }
}
]]>         
        </programlisting>
      </informalexample>
    </para>
    <para>
      Finally, note that class initialization does not apply to nullable types. So, the following code is correct and acceptable:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
class Foo {
  protected ?int $x;

  // no __construct() needed

  protected function foo() {
    ...
  }
}
]]>
        </programlisting>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.otherrulesandfeatures.callbacks">
    <title>Callbacks and <function>fun</function></title>
    <para>
      A standard way to call a function is by using a callback. There are two primary PHP functions for calling callbacks: <function>call_user_func</function> and <function>call_user_func_array</function>.
     </para>
     <note>
        <para>
          <literal>eval()</literal> can be used to execute string-based code, but it can be extremely dangerous and is not advised (even though HHVM does support it).
        </para>
     </note>
     <para>
      Take the following example:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?php

function cufun1(string $x): string {
  return $x.$x;
}

function cufun2(): (function(string): string) {
  return function($x) { return $x.$x; };
}

class CUFunFunFun {
  public function testFun1() {
    var_dump(call_user_func('cufun1', "blah"));
  }

  public function testFun2() {
    $x = cufun2();
    var_dump($x('blah'));
  }
}

function main_cufff() {
  $f = new CUFunFunFun();
  $f->testFun1();
  $f->testFun2();
}

main_cufff();
]]>
        </programlisting>
        <para>
          The above code shows the use of <literal>call_user_func()</literal> to call <literal>cufun1()</literal> from the function <literal>testFun1()</literal>. This code runs perfectly fine in HHVM. But, if <literal>&lt;?hh</literal> was used instead of <literal>&lt;?php</literal>, this code would not pass the Hack type checker:
        </para>
        &example.outputs;
        <screen>
<![CDATA[
File "cuf.php", line 14, characters 14-45:
This call is invalid, this is not a function, it is a string
]]>
        </screen>
        <para>
          Hack throws an error here because it type inference and safety cannot be guaranteed when using a <literal>string</literal>as the function name to <literal>call_user_func()</literal>. For example, imagine changing the <literal>call_user_func()</literal> line to be:
        </para>
        <programlisting role="php">
<![CDATA[
var_dump(call_user_func('cufun1', 3));
]]>
        </programlisting>
        <para>
          Normally Hack would catch such a problem (passing an <literal>int</literal> to a function that takes a <literal>string</literal>), but Hack cannot provide these guarantees with <literal>call_user_func()</literal>. Thus an HHVM fatal error will be thrown *<emphasis>at runtime</emphasis>*.
        </para>
        &example.outputs;
        <screen>
<![CDATA[
[~/www/tests] php cuf.php
HipHop Fatal error: Argument 1 passed to cufun1() must be an instance of string, int given in cuf.php on line 6
]]>
        </screen>
      </informalexample>
    </para>
    <para>
     In order to make these type of callbacks type-checkable and type-safe, Hack has introduced <function>fun</function>. <function>fun</function> is a special function used to create a &quot;pointer&quot; to a function in a type-safe way. <function>fun</function> takes a <literal>string</literal> corresponding to the name of the function to be called. It returns a &quot;type-safe&quot; <literal>string</literal> that can be used in, for example, <literal>call_user_func()</literal>. Building upon the example above to use <function>fun</function>:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

function fun1(string $x): string {
  return $x.$x;
}

function fun2(): (function(string): string) {
  return fun('f1');
}

class FunFunFun {
  public function testFun1() {
    $x = fun('fun1');
    var_dump(call_user_func($x, "blah"));
  }

  public function testFun2() {
    $x = fun2();
    var_dump($x('blah'));
  }
}

function main_fff() {
  $f = new FunFunFun();
  $f->testFun1();
  $f->testFun2();
}

main_fff();
]]>
        </programlisting>
        <para>
         Before calling <literal>call_user_func()</literal>, <function>fun</function> is called. Returned from <function>fun</function> is a <literal>string()</literal> that can be used and analyzed by the Hack type checker. This code runs exactly the same in HHVM as the first example, but, now the Hack type checker can catch typing errors. In <literal>testFun1()</literal>, imagine passing an <literal>int</literal> instead of a <literal>string</literal>. Hack will throw an error.
        </para>
        <programlisting role="php">
<![CDATA[
var_dump(call_user_func($x, 3));
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
File "fun.php", line 20, characters 17-17:
Invalid argument
  File "fun.php", line 9, characters 15-20:
  This is a string
  File "fun.php", line 20, characters 17-17:
  It is incompatible with an int
]]>
        </screen>
      </informalexample>
    </para>
    <para>
     <emphasis>It is important to note</emphasis> that the argument to <function>fun</function> must be a single-quoted, constant literal string representing a valid function name. For example:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
function foo(): void {}

function main(): void {
  $func = fun('foo');
  $str = "foo";
  // $wontwork = func($str);
}
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>
     The bottom line is to use <function>fun</function> before using <literal>call_user_func()</literal> for these type of function calls.
    </para>
  </sect1>

  <sect1 xml:id="hack.otherrulesandfeatures.overridereturntype">
    <title>Overriding on Return Type</title>
    <para>
      Hack provides the ability to annotate return types on functions. This brings with it another added feature. Under a specific circumstance, Hack provides the ability to override functions based on just return type. That circumstance is a subclass overriding a method in a parent class with a return type compatible with the return type of the parent class. For example:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
class Foo {}
class FooChild extends Foo {}

class AA {
  protected function bar(): Foo { return new Foo(); }
}

class BB extends AA {
  protected function bar(): FooChild { return new FooChild(); }
}
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>
      In the above example, Hack is happy because <literal>BB::bar()</literal> returns <literal>FooChild</literal>, which is a child of the <literal>Foo</literal> that <literal>AA::bar()</literal> returns.
    </para>
    <para>
      Here are some <emphasis>unsupported</emphasis> examples:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

class Foo {}
class FooChild extends Foo {}

class AA {
  protected function bar(): Foo { return new Foo(); }
}

class BB extends AA {
  protected function bar(): int { return 1; }
}
]]>
        </programlisting>
        <para>
          In the above, Hack will balk since <literal>int</literal> and <literal>Foo</literal> are not compatible types.
        </para>
      </informalexample>
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

class Foo {}
class FooChild extends Foo {}

class AA {
  protected function bar(): FooChild { return new FooChild(); }
}

class BB extends AA {
  protected function bar(): Foo { return new Foo(); }
}
]]>
        </programlisting>
        <para>
          In the above, Hack will again balk since returning <literal>Foo</literal> from <literal>BB:bar()</literal> is not compatible with <literal>AA:bar()</literal> returning <literal>FooChild</literal>. The other way around, as shown above, does, of course, make Hack happy.
        </para>
      </informalexample>
    </para>
    <note>
      <para>
        Overloading on return type within the same class is not supported by Hack (in fact, like PHP, no overloading exists at all; thus, this holds for function arguments as well). For example: 
        <informalexample>
          <programlisting role="php">
<![CDATA[
<?hh
class AA {
  function bar(): string { return 's';}
  function bar(): int { return 1;}
}
]]>
          </programlisting>
        </informalexample>
      </para>
    </note>
  </sect1>

  <sect1 xml:id="hack.otherrulesandfeatures.invariant">
    <title><literal>invariant()</literal></title>
    <para>
      There are times when it is desirable to have an object be type-checked as a more specific type than it is currently declared. For example, an interface needs to be type-checked as one of its implementing classes. <literal>invariant()</literal> is used to help the Hack type-checker make this more specific type determination.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

interface I {
  public function foo();
}

class A implements I {
  public function foo(): void {
    echo "A";
  }
}

class B implements I {
  public function foo(): void {
    echo "B";
  }

  public function yay(): void {
    echo "B->yay!";
  }
}

function baz(int $a): I {
  return $a === 1 ? new A() : new B();
}

function bar(): B {
  $iface = baz(2);
  invariant($iface instanceof B, "must be a B");
  $iface->yay();
  return $iface;
}

bar();
]]>
      </programlisting>
      <para> 
        Without the <literal>invariant()</literal>, Hack will give an error similar to the following:
      </para>
      &example.outputs;
      <screen>
<![CDATA[
File "in2.php", line 30, characters 11-13:
The method yay is undefined in an object of type I
File "in2.php", line 23, characters 23-23:
Check this out
]]>
      </screen>
      </informalexample>
    </para>
    <para>
      Here is another example where a variable can be <literal>mixed</literal> and <literal>invariant</literal> is used to help Hack understand <literal>$untyped_array</literal>is a typed <literal>array</literal>.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

class Foo {
  public function foo_method(): void {}
}

function mixed_method(int $x): mixed {
  if ($x === 3) {
    $a = array();
    $a[0] = new Foo();
  } else {
    return false;
  }
}

function bar(): bool {
  $untyped_array = mixed_method(3); // Let's assume that this method can return an array of Foo
  invariant(is_array($untyped_array), "must be an array of Foo()");
  $untyped_array[0]->foo_method(); // Hack now understands that $untyped_array is an array
  return true;
}

bar();
]]>
        </programlisting>
        <para> Without the <literal>invariant()</literal>, the Hack type checker would give an error similar to the following:
        </para>
        &example.outputs;
        <screen>
<![CDATA[
File "h5.php", line 20, characters 5-21:
This is not a container, this is a mixed value
  File "h5.php", line 7, characters 32-36:
  You might want to check this out
]]>
        </screen>
      </informalexample>
    </para>
    <para>
      In many ways, <literal>invariant()</literal> puts the onus on the programmer to be correct; otherwise, bad things may happen if the invariant is not satisfied (e.g., exceptions or php
      fatals).
    </para>
  </sect1>

  <sect1 xml:id="hack.otherrulesandfeatures.functionsignatureordering">
    <title>Function Signature Ordering</title>
    <para>
      PHP allows some flexibility when it comes to the ordering of a function signature. For example, the following ways of defining the <literal>foo()</literal> signature are perfectly valid:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
class A {
  public static function foo() {}
}
]]>
        </programlisting>
        <programlisting role="php">
<![CDATA[
<?php
class A {
  static public function foo() {}
}
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>
      However, in Hack, there are rules for function signature ordering:
    </para>
    <orderedlist>
      <listitem>
        <para>
          The keywords can be in any order.
        </para>
      </listitem>
      <listitem>
        <para>
          A keyword cannot be repeated (e.g. no <literal>public public function foo()</literal>).
        </para>
      </listitem>
      <listitem>
        <para>
          Specific keywords cannot collide. (i.e., no collision between <literal>public/protected/private</literal>. No collision between <literal>abstract/final</literal>).
        </para>
      </listitem>
    </orderedlist>
    <para>
      Here is a sane function signature ordering for Hack.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
class A {
  // (access) [static] function (name) {}
  public static function foo() {}
}
]]>
        </programlisting>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.otherrulesandfeatures.initialization">
    <title>Calling Non-Private Methods During Initialization</title>
    <para>
      The Hack type checker will throw an error when trying to call non-private methods during the initialization of an object. Here is an example: 
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

class PettingZoo {
  private FluffyBunny $fluffy;

  public function __construct(FluffyBunny $bunny) {
    $this->doOtherInit();
    $this->fluffy = new FluffyBunny();
  }

  protected function doOtherInit(): void { }
}
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
File "PettingZoo.php", line 8, characters 5-22:
Until the initialization of $this is over, you can only call private methods
The initialization is not over because $this->fluffy can still potentially be null
]]>
        </screen>
      </informalexample>
    </para>
    <para>
      It is very important for Hack to be able to check the codebase quickly. In order to do this, Hack needs to be able to parallelize itself and check classes and files separately as much as possible. Therefore, it is not desirable to have to look at a whole
      inheritance hierarchy in order to figure out if someone is using a member variable before it is initialized. By limiting the user to only calling private methods, it can be ensured that member variables are always initialized by the time they are used.
    </para>
    <para>
      There are two ways to solve this problem:
      <itemizedlist>
        <listitem>
          <para>
            Calling only private methods: As discussed, until all the member variables have been initialized, only call private methods. Why? The Hack checker is relatively lazy, and does not want to have to check more than one class. Since the method is private, its definition must be in the instantiated class, and so the Hack checker is able to read it and make sure no one is using an uninitialized member variable.
          </para>
        </listitem>
        <listitem>
          <para>
            Moving the method call until initialization is done: Sometimes by moving around method calls, the issue can be avoided altogether.
          </para>
        </listitem>
      </itemizedlist>
    </para>
    <para>
      Here is an example of the first fix:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

class PettingZoo {
  private FluffyBunny $fluffy;

  public function __construct(FluffyBunny $bunny) {
    $this->doOtherInit();
    $this->fluffy = new FluffyBunny();
  }

  private function doOtherInit(): void { }
}
]]>
        </programlisting>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.otherrulesandfeatures.uniontypes">
    <title>Union Types</title>
    <para>
      Hack does not support union types. The following piece of code will run in HHVM. However it will not pass the Hack type checker, even though many would believe that it should:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

interface UTI {
  public function utBar();
}

class UTA {
  public function utFoo(): void {
    echo "UTA:ut_foo()\n";
  }
}

class UTB extends UTA implements UTI {
  public function utBar(): void {
    echo "UTB:utBar()\n";
  }
}

function ut_xyz(UTA $a) {
  if ($a instanceof UTI) {
    $a->utBar();
  }
  $a->utFoo();
}

function main_ut() {
  $b = new UTB();
  ut_xyz($b);
}

main_ut();
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
UTB:utBar()
UTA:ut_foo()
]]>
        </screen>
        <para>
          The type checker will balk, however:
        </para>
        <screen>
<![CDATA[
File "union_types.php", line 24, characters 7-11:
The method utFoo is undefined in an object of type UTI
]]>
        </screen>
        <para>
          At first glance, the function <literal>ut_xyz()</literal> looks very reasonable. It takes an <literal>UTA</literal>, and since <literal>UTB</literal> is a child of <literal>UTA</literal>, <literal>utFoo()</literal> can be called successfully on either a <literal>UTA</literal> or <literal>UTB</literal>. The <literal>instanceof</literal> check allows a passed in <literal>UTB</literal> to call <literal>utBar()</literal>.
        </para>
      </informalexample>
    </para>
    <para>
      So what is the issue? It is not necessarily an issue, but rather how Hack deduces the types of the variables in scope. After the <literal>instanceof</literal> check, Hack starts resolving the real type of <literal>$a</literal>. First, Hack determines that <literal>$a</literal> can be a <literal>UTI</literal>. Then at the call to <literal>utFoo()</literal>, Hack determines that <literal>$a</literal> can be a <literal>UTA</literal>.
      <literal>UTA</literal> and <literal>UTI</literal> are not compatible types (i.e., <literal>UTA</literal> does not implement <literal>UTI</literal>). Thus, Hack decides that <literal>$a</literal> cannot be both <literal>UTI</literal> and <literal>UTA</literal>.
    </para>
    <para>
      The scenario describes above represents union types. Union types allow a variable to possibly have several, distinct representations. For performance reasons, Hack does not support this paradigm. To alleviate the type error presented above, local variables can be used.
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

interface UTI {
  public function utBar();
}

class UTA {
  public function utFoo(): void {
    echo "UTA:ut_foo()\n";
  }
}

class UTB extends UTA implements UTI {
  public function utBar(): void {
    echo "UTB:utBar()\n";
  }
}

function ut_xyz(UTA $a) {
  $a_local = $a;
  if ($a_local instanceof UTI) {
    $a_local->utBar();
  }
  $a->utFoo();
}

function main_ut() {
  $b = new UTB();
  ut_xyz($b);
}

main_ut();
]]>
        </programlisting>
        <para>
          The local variable <literal>$a_local</literal> is assigned to <literal>$a</literal>. Now since these two variables are distinct, each can represent a different type. Hack will not throw a type error in this case.
        </para>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.otherrulesandfeatures.heredocs">
    <title>Heredocs</title>
    <para>
      Hack supports the type checking of the PHP string building technique called heredocs (e.g., <literal>$x = &lt;&lt;&lt;EOF ..... EOF;</literal>). Hack does not balk when encountering a heredoc within PHP code, and throws an error when using heredocs incorrectly. Here is an example of Hack catching a heredoc error:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

function heredoc(): void {
  $x = <<<MYHD
Hello, I am in here
}

echo heredoc();
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
File "heredoc.php", line 4, characters 8-10:
Unterminated heredoc
]]>
        </screen>
        <para>
          Of course, to fix this error, one needs to terminate the heredoc:
        </para>
        <programlisting role="php">
<![CDATA[
<?hh

function heredoc(): void {
  $x = <<<MYHD
Hello, I am in here
MYHD;
}

echo heredoc();
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>
      There is a known current limitation with Hack's support of heredocs. The following code will not parse:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

function heredoc(): void {
  $foo = 3;
  $x = <<<MYHD
{$foo}
MYHD;
}

echo heredoc();
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
File "heredoc.php", line 6, characters 7-11:
Syntax error
]]>
        </screen>
      </informalexample>
    </para>
  </sect1>
  <sect1 xml:id="hack.otherrulesandfeatures.nowdocs">
    <title>Nowdocs</title>
    <para>
      Hack supports nowdocs. In summary, nowdocs are similar to heredocs but without the parsing. Here is an example:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh

function foo(): void {
  $name = 'MyName';

  echo <<<'EOT'
My name is &quot;$name&quot;. I am printing some text.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \x41
EOT;
}

foo();
]]>
        </programlisting>
        &example.outputs;
        <screen>
<![CDATA[
My name is "$name". I am printing some text.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \x41
]]>
        </screen>
        <para>
          All text is explicitly printed out and not replaced with variable values. Unicode characters are not replaced with their literal bindings.
        </para>
      </informalexample>
    </para>
  </sect1>

  <sect1 xml:id="hack.otherrulesandfeatures.casting">
    <title>Casting</title>
    <para>
      Hack currently follows the PHP rules for casting, with a few minor exceptions. Hack does not allow the use of certain primitives where there is an equivalent primitive type (e.g. <literal>float</literal> instead of <literal>double</literal> or <literal>real</literal>). There is discussion about providing the capability to cast to non-primitive types, but that is not implemented as of yet.
    </para>
  </sect1>

  <sect1 xml:id="hack.otherrulesandfeatures.classnameresolution">
    <title>Class Name Resolution</title>
    <para>
      Class name resolution provides a way of accesing the name of a class, interface or trait.
    </para>
    <note>
      <para>
        This is compatible to the PHP5 RFC around class name resolution. <link xlink:href="https://wiki.php.net/rfc/class_name_scalars">PHP: rfc:class_name_scalars</link>
      </para>
    </note>
    <para>
      Here is an example:
      <informalexample>
        <programlisting role="php">
<![CDATA[
<?hh
$obj = newv(FooClass::class, $constructor_args); 
BaseFacebookTestCase::assertInstanceOf(FooClass::class, $obj, 'I hope that constructor worked');
]]>
        </programlisting>
      </informalexample>
    </para>
    <para>
      As you might imagine, <literal>Foo::class</literal> is significantly easier to statically typecheck than <literal>'Foo'</literal>; we know that <literal>Foo::class</literal> is a class name, but interpreting the literal string <literal>'Foo'</literal> requires divining that it is in fact a class name “pointer” based on how that string is used several hops away. As such, there’s now a better way than using string literals like <literal>'ClassName'</literal> or <literal>'InterfaceName'</literal> in your code.
    </para>
  </sect1>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
