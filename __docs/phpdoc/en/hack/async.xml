<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="hack.async">
  <title>Async</title>
  <para>
    Asynchronous programming refers to a programming design pattern that allows several distinct tasks to cooperatively transfer control to one another on a given thread of execution. The tasks are isolated from one another from the perspective of dependency minimization and task interaction.     Asynchronous programming is most often used in the context of input/output (I/O). For synchronous (i.e., blocking) I/O APIs, asynchronous tasks can be batched together to perform a set of work. And, of course, asynchronous (i.e., non-blocking) I/O APIs fit nicely into the asynchronous programming model. 
  </para>
  <para>
    To enable asynchronous programming in HHVM, the concept of creating async functions was used. The two HHVM PHP language keywords that enable async functions are <literal>async</literal> and <literal>await</literal>. <literal>async</literal> declares a function as asynchronous. <literal>await</literal> suspends the execution of an async function until the result of the asynchronous operation represented by <literal>await</literal> is available. The return value of a function that <literal>await</literal> can be used upon is an object that implements <literal>Awaitable&lt;T&gt;</literal>.
    <informalexample>
      <programlisting role="php">
<![CDATA[
<?hh

class Foo{}
class Bar {
  public function getFoo(): Foo {
    return new Foo();
  }
}

async function gen_foo(int $a): Awaitable<?Foo>; {
  if ($a === 0) {
    return null;
  }

  $bar = await gen_bar($a);
  if ($bar !== null) {
    return $bar->getFoo();
  }

  return null;
}

async function gen_bar(int $a): Awaitable<?Bar> {
  if ($a === 0) {
    return null;
  }

  return new Bar();
}


gen_foo(4);
]]>
      </programlisting>
      <para>
        <literal>gen_foo()</literal> is an async function as shown by the <literal>async</literal> keyword preceding the function signature. Async functions always returns an object that implements <literal>Awaitable&lt;T&gt;</literal> (the normal concrete implementation is <literal>WaitHandle&lt;T&gt;</literal>, but it is almost always preferred to use the <literal>Awaitable&lt;T&gt;</literal> interface). 
      </para>
      <para>
        The call to <literal>gen_foo()</literal> brings with it some interesting properties that are unique to async functions. The async function may eagerly execute part of the async function body. The call <literal>gen_bar()</literal> first returns an <literal>Awaitable</literal>, that may or may not be finished in its execution. If it is not finished, <literal>gen_foo()</literal> suspends execution; otherwise <literal>gen_foo()</literal> just unpacks the result and continues eager execution. The execution will not suspend outside of the <literal>await</literal> statement. The asynchronous programming framework keeps track of all of the asynchronous operations that should be completed. 
      </para>
    </informalexample>
  </para>

  <sect1 xml:id="hack.async.asyncawait">
    <title><literal>async</literal> and <literal>await</literal></title>
    <para>
      <literal>async</literal> declares a function as asynchronous. <literal>await</literal> suspends the execution of an async function until the result of the asynchronous operation represented by <literal>await</literal> is available. The return value of a function that <literal>await</literal> can be used upon is an object that implements <literal>Awaitable&lt;T&gt;</literal>. 
    </para>
  </sect1>

  <sect1 xml:id="hack.async.annotating">
    <title>Type Annotating Async Functions</title>
    <para>
      Typing async functions so that the Hack type checker will understand them is fairly straightforward. Just ensure that the function signature is preceded by the <literal>async</literal> keyword and that the return type is an object that implements <literal>Awaitable&lt;T&gt;</literal> (normally this should just be <literal>Awaitable&lt;T&gt;</literal> directly). 
    </para>
    <para>
      If an implementation of an async function returns type <literal>T</literal>, the return type visible to its callers is <literal>Awaitable&lt;T&gt;</literal>.  
    </para>
  </sect1>

  <sect1 xml:id="hack.async.signatureexamples">
    <title>Signature Examples</title>
    <informalexample>
      <programlisting role="php">
<![CDATA[
<?hh
async function genFoo(): Awaitable<Foo> { return new Foo(); }
async function cached_result<T>(T $x): Awaitable<T> { return $x; }
async function gen_void(): Awaitable<void> { return; }
async function gen_add(Awaitable<int> $genA, Awaitable<int> $genB): Awaitable<int> { 
  list($a, $b) = await genva($genA, $genB); 
  return $a + $b; 
}
class Preparable<T> implements Awaitable<T> { ... }
class MyPreparable extends Preparable<MyPreparable> { ... }
]]>
      </programlisting>
    </informalexample>
  </sect1>

  <sect1 xml:id="hack.async.awaitablesvscontinuations">
    <title>Awaitables vs Continuations</title>
    <para>
      This table briefly summarizes <literal>Continuation&lt;T&gt;</literal> and <literal>Awaitable&lt;T&gt;</literal>. Continuations are used in *synchronous, generator* based programming on functions that <literal>yield</literal> results. 
    </para>
    <informaltable>
      <tgroup cols="4">
        <colspec align="center" />
        <colspec align="center" />
        <colspec align="center" />
        <colspec align="center" />
        <tbody>
          <row>
            <entry>
              <para>
                <emphasis role="strong">Type</emphasis>
              </para>
            </entry>
            <entry>
              <para>
                <emphasis role="strong">Definition</emphasis>
              </para>
            </entry>
            <entry>
              <para>
                <emphasis role="strong">How to Use</emphasis>
              </para>
            </entry>
            <entry>
              <para>
                <emphasis role="strong">Notes</emphasis>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <emphasis role="strong"><literal>Continuation&lt;T&gt;</literal></emphasis>
              </para>
            </entry>
            <entry>
              <para>
                The interface for items that are generators. They can be looped over.
              </para>
            </entry>
            <entry>
              <para>
                <literal>yield</literal> directly (e.g., <literal>yield $foo;</literal>)
              </para>
            </entry>
            <entry>
              <para>
                Generators must always yield the same type. Continuations yield items of a type <literal>T</literal>. Continuations are used only with <literal>yield</literal>. 
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <emphasis role="strong"><literal>Awaitable&lt;T&gt;</literal></emphasis>
              </para>
            </entry>
            <entry>
              <para>
                The interface for items that are returned asynchronously.
              </para>
            </entry>
            <entry>
              <para>
                Awaitables are used in function declared as <literal>async</literal> and on functions that can be &quot;awaited&quot; upon via the <literal>async</literal>keyword.
              </para>
            </entry>
            <entry>
              <para>
                Only use Awaitables with async functions; Continuations should not be used for this purpose.
              </para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </sect1>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
